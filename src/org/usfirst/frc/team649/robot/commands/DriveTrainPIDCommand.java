package org.usfirst.frc.team649.robot.commands;

import org.usfirst.frc.team649.robot.Robot;

import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.command.Command;

import org.usfirst.frc.team649.robot.Robot;

import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 *
 */
public class  DrivetrainPIDCommand extends Command {
	double distance;
	double tolerance = 0.25;
	public PIDController drivePIDLeft,drivePIDRight;
	
    public DrivetrainPIDCommand(double distance) {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
    	drivePIDLeft = Robot.drivetrain.getPIDController();
    	drivePIDRight = Robot.drivetrain.getPIDController();
    	this.distance = distance;
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	drivePIDLeft.enable();
    	drivePIDRight.enable();
    	Robot.isPIDActive = true;
    	double setpoint = distance;
    	drivePIDLeft.setSetpoint(setpoint);
    	drivePIDRight.setSetpoint(setpoint);
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {

        return drivePIDLeft.onTarget() && drivePIDRight.onTarget();
    }

    // Called once after isFinished returns true
    protected void end() {
    	drivePIDLeft.disable();
    	drivePIDRight.disable();
    	Robot.isPIDActive = false;
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}